name: Build Packer Image

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Debug AWS Secrets
        run: |
          echo "Debugging AWS Secrets:"
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          echo "SUBNET_ID=${{ secrets.SUBNET_ID }}"
          echo "VPC_ID=${{ secrets.VPC_ID }}"
          echo "AMI_USERS=${{ secrets.AMI_USERS }}"
          echo "SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Run Tests
        run: mvn test
        env:
          AWS_S3_BUCKET_NAME: "test-bucket"

      - name: Build Packer Image
        id: build_ami
        env:
          PACKER_LOG: 1
        run: |
          cd packer
          packer init packer-template.pkr.hcl
          packer build -var aws_region=${{ secrets.AWS_REGION }} \
                       -var subnet_id=${{ secrets.SUBNET_ID }} \
                       -var vpc_id=${{ secrets.VPC_ID }} \
                       -var ami_users=${{ secrets.AMI_USERS }} \
                       -var db_name=csye6225 \
                       -var sns_topic_arn=${{ secrets.SNS_TOPIC_ARN }} \
                       packer-template.pkr.hcl | tee packer_output.log

          if [ ! -f packer_output.log ]; then
            echo "Error: Packer output log is missing."
            exit 1
          fi

          AMI_ID=$(grep -o 'ami-[a-zA-Z0-9]*' packer_output.log | tail -n1)
          echo "Extracted AMI_ID: $AMI_ID"

          if [ -z "$AMI_ID" ]; then
            echo "Error: AMI_ID is empty. Packer build might have failed."
            exit 1
          fi

          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Configure AWS Credentials (Demo Account)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Launch Template and ASG
        run: |
          echo "Starting to update Launch Template and ASG..."

          # Fetch Launch Template ID
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=csye6225_asg" \
            --query 'LaunchTemplates[0].LaunchTemplateId' --output text)

          if [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "Error: Launch Template ID not found."
            exit 1
          fi
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"

          # Create a new version of Launch Template with the new AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)

          if [ -z "$NEW_VERSION" ]; then
            echo "Error: Failed to create a new launch template version."
            exit 1
          fi
          echo "Created new Launch Template version: $NEW_VERSION"

          # Get Auto Scaling Group Name
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'webapp-asg')].AutoScalingGroupName" \
            --output text)

          echo "Detected Auto Scaling Group Name: $ASG_NAME"

          if [ -z "$ASG_NAME" ]; then
            echo "Error: Auto Scaling Group name could not be determined."
            exit 1
          fi

          # Update ASG with the latest Launch Template version
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateId=$LAUNCH_TEMPLATE_ID,Version=$NEW_VERSION"

          # Start Instance Refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' --output text)

          if [ -z "$REFRESH_ID" ]; then
            echo "Error: Failed to start instance refresh."
            exit 1
          fi
          echo "Started Instance Refresh with ID: $REFRESH_ID"

          # Monitor Instance Refresh
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' --output text)

            echo "Instance Refresh Status: $STATUS"

            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              break
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled."
              exit 1
            fi

            sleep 30
          done
